//***************************************************************************
//                          pvapp.h  -  description
//                             -------------------
//  begin            : dom. nov. 24 22:34:55 2024
//  generated by     : pvdevelop (C) Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************
#ifndef _PVAPP_H_
#define _PVAPP_H_

#ifdef USE_INETD
static int trace=0; // todo: set trace=0 if you do not want printf() within event loop
#else
static int trace=1; // todo: set trace=0 if you do not want printf() within event loop
#endif

#include "processviewserver.h"
// todo: comment me out
//#include "rlmodbusclient.h"
//#include "rlsiemenstcpclient.h"
//#include "rlppiclient.h"
//#include "modbusdaemon.h"             // this is generated. Change for name.h -> "name.mkmodbus"
//#include "siemensdaemon.h"            // this is generated
//#include "ppidaemon.h"                // this is generated

int show_mask1(PARAM *p);

// Início
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBAL
typedef struct {
	char LabelText[32];
	float Pressure;
	float Temperature;
} machine_t;

typedef struct {
	char Parameter[32];
	char Description[64];
	void *Node;
	char DataType[16];
	union {
		float f;
		char s[32];
	} Value;
	float Min, Max, StepSize;
	char Unit[16];
} recipe_template_t;

typedef struct {
	char Parameter[32];
	char Description[64];
	union {
		float f;
		char s[32];
	} Value;
	float Min, Max, StepSize;
} recipe_t;

// END GLOBAL
#ifndef _MAIN_
// MASKS
#define SLIDER_INIT(i) ((recipe_template[i].Value.f - recipe_template[i].Min) / (recipe_template[i].Max - recipe_template[i].Min) * 100)
#define SLIDER(i) ((*(float *)recipe_template[i].Node - recipe[d->recipe][i].Min) / (recipe[d->recipe][i].Max - recipe[d->recipe][i].Min) * 100)
extern machine_t machine01;
extern recipe_template_t recipe_template[];
extern const char *recipes[];
extern recipe_t recipe[][3];
void printRecipe(PARAM *p, int id, int r);
void printValues(PARAM *p, int id);

// END MASKS
#else
// MAIN
machine_t machine01 = {"label x", 20, 5};

recipe_template_t recipe_template[] = {
        //Parameter, Description, Node,                 Data Type,  Value,   Min, Max, Step, Unit
	{ "temp",     "",        &machine01.Temperature, "number", {.f = 20}, 0,  100,  1,  "°C"},	
	{ "pressure", "",        &machine01.Pressure,    "number", {.f =  5}, 0,   20,  5,  "bar"},	
	{ "text",     "",        machine01.LabelText,    "string", {.s = "label x"}, 0, 0, 0, ""}
};

const char *recipes[] = {
	"Recipe1", "Recipe2"
	,""
};

recipe_t recipe[][3] = {
	//Recipe 01
	{{ "temp",     "", {.f = 26}, 0, 100, 1},
	 { "pressure", "", {.f = 10}, 0,  20, 5},	
	 { "text",     "", {.s = "texto 1"}, 0, 0, 0}},
	//Recipe 02
	{{ "temp",     "", {.f = 17}, 0, 100, 1},	
	 { "pressure", "", {.f = 15}, 0,  20, 5},	
	 { "text",     "", {.s = "texto 2"}, 0, 0, 0}}
};

void printRecipe(PARAM *p, int id, int r){
    char buf[1024];
    int i, j = 0;
    for(i = 0; i<3; i++){
        if(!strcmp(recipe_template[i].DataType,"number"))
	    j+=sprintf(&buf[j],"%s: Value = %g %s, min = %g, max = %g, step = %g\n", recipe[r][i].Parameter,recipe[r][i].Value.f,
		recipe_template[i].Unit, recipe[r][i].Min, recipe[r][i].Max, recipe[r][i].StepSize);
	    else
		j+=sprintf(&buf[j],"%s: Value = %s\n",recipe[r][i].Parameter,recipe[r][i].Value.s);
    }
    pvPrintf(p,id,"%s",buf);
}

void printValues(PARAM *p, int id){
    char buf[1024];
    int i, j = 0;
    for(i = 0; i<3; i++){
      if(!strcmp(recipe_template[i].DataType,"number"))
	  j+=sprintf(&buf[j],"%s: %g %s\n", recipe_template[i].Parameter, *(float *)recipe_template[i].Node, recipe_template[i].Unit);
      else
	  j+=sprintf(&buf[j],"%s: %s\n",recipe_template[i].Parameter, (char *)recipe_template[i].Node);
    }
    pvPrintf(p,id,"%s",buf);
}
// END MAIN
#endif
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fim

#endif
